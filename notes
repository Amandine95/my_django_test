需要多个装饰器可以通过多继承来实现:
1,定义多个装饰器
2,创建多个扩展类,重写as_view()方法,每个类实现一个装饰器行为
3,扩展类继承于object类(保证每一级的as_view()方法都能访问到)
4,视图类继承于需要添加装饰器的扩展类,以及View类(多继承)
5,super()调用上级方法的顺序遵循MRO
6,object类中没有as_view方法,因此扩展类按照MRO去调用上级的as_view方法
7,View类最后被访问到并返回view对象
8,按照MRO相反方向去进行装饰行为的实现


django的模板：
1,项目文件目录下创建templates文件夹,存放模板文件
2,在settings.py中配置模板文件路径
3,创建子应用,安装app
4,创建视图类,render方法返回模板,三个参数:request,模板路径,context上下文(模板中展示的数据)
5,创建子应用url
6,将url注册到总的url中